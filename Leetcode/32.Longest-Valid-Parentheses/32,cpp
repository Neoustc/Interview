// dp [i] the longestValidParentheses in s[0...i - 1];
// s[i] == '(' dp[i + 1] = dp[i];
// s[i] == ')' 
************************************************
dp[i] the longestValidParentheses ends in s[i];
s[i] == '(' dp[i + 1] = 0;
s[i] == ')' if (s[i - dp[i] - 1] == '(')
		dp [i + 1] = 2 + dp[i] + dp[i - dp[i] - 1]; 

int longestValidParentheses(string s) {
	 	int len = s.size();
	 	int dp[len + 1] = {0};
	 	int maxlen = 0;
	 	for (int i = 0; i < len; ++i) {
	 		if (s[i] == ')') {
	 			int left = i - dp[i] - 1;
	 			if (left >= 0 && s[left] == '(') {
	 				dp [i + 1] = 2 + dp[i] + dp[left];
	 				maxlen = max(maxlen, dp[i + 1]);
	 			}
	 		}
	 	}
	 	return maxlen;
}
************************************************
